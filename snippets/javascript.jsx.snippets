# General
snippet conlog
	console.log(${1});

# ES6
snippet im
	import "${1}";
snippet imf
	import ${1} from "${2}";
snippet class
	class ${1} {
		constructor(${2}) {
			${0}
		}
	}
snippet method
	${1:funcName}(${2}) {
		${0}
	}
snippet function
	function ${1}(${2}) {
		${0}
	}
snippet =>
	(${1}) => ${0}

# Docs
snippet doc
	/**
	 * ${0}
	 */

snippet param
	@param {${1:Type}} ${2:Name} ${0:Description}

snippet author
	@author ${0}

snippet created
	@created `system("date +%Y-%m-%d")`

snippet returns
	@returns {${1:type}} ${0:description}

# Conditionals
snippet if
	if (${1}) {
		${0}
	}

snippet else
	else {
		${0}
	}

snippet elif
	else if (${1}) {
		${0}
	}

# Loops
snippet for
	for (${1};${2};${3}) {
		${0}
	}

snippet foreach
	foreach((${1}) => {
		${0}
	});

snippet forin
	for (${1} in ${2}) {
		${0}
	}

snippet forof
	for (${1} of ${2}) {
		${0}
	}

snippet while
	while (${1}) {
		${0}
	}

snippet dowhile
	do {
		${0}
	} while(${1});

# MarkoJS
snippet mcond
	<${1:if}(${2:condition})>
		${0}
	</$1>

snippet melse
	<else>
		${0}
	</else>

# Jest
snippet desc
	describe('${1:description}', () => {
		${0}
	});

snippet it
	it('${1:decription}', () => {
		${0}
	});

snippet be
	beforeEach(() => {
		${0}
	});

snippet ae
	afterEach(() => {
		${0}
	});

snippet expect
	expect(${1:expected})${2}.to${3:function}(${4});

# Graphql snippets
snippet grreq
	var { buildSchema, GraphQLSchema, printSchema, GraphQLObjectType,
	      GraphQLString, GraphQLID, GraphQLInt, GraphQLList } = require('graphql');

snippet grbs
	var ${1:schemaName} = buildSchema(\`
		${0}
	\`);

snippet grobj
	var ${1:Query} = new GraphQLObjectType({
		name: '${2:Name}',
		fields: {
			${0}
		}
	});

snippet grarg
	${1:arg}: {type: ${0:type}}

snippet grresolve
	resolve: (_, {${1:roots}}) => {
		${0}
	}

snippet grschema
	var ${1:schema} = new GraphQLSchema({
		query: ${0:graphQLObjType},
	});

snippet grtype
	GraphQL${0:String}
# CommonJS
snippet require
	${1:const} ${2} = require('${0}');
snippet closure
	(function${1}(){
		${0}
	})();
# React Js
snippet rcomp
	import React, { Component } from 'react';

	class ${1:Name} extends Component {
	    render() {
			return (
				${0}
			)
	    }
	}

	export default $1;
snippet <!
	<!-- ${1:TODO} -->
