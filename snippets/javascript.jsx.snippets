# Basics
snippet conlog
	console.log(${1:Something to log}${0});

snippet import
	import {${1:identities}} from "${2:location}";

snippet constructor
	constructor(${1:field1}, ${2:field2}) {
		this.$1 = $1;
		this.$2 = $2;
	}

snippet function
	/**
	 * ${1:Description}
	 */
	${2:funcName}(${3}) {
		${0}
	}

# Docs
snippet /**
	/**
	 * ${1:Description of the function}
	 */

snippet param
	@param {${1:Type}} ${2:Name} ${3:Description}

snippet author
	@author ${1:Name}

snippet created
	@created `system("date +%Y-%m-%d")`
# Conditionals
snippet if
	if (${1:condition}) {
		${2:body}${0}
	}

snippet else
	else {
		${1:otherwise}${0}
	}

snippet elif
	else if (${1:condition}) {
		${2:body}${0}
	}

# MarkoJS
snippet comp
	<${1:component} class="${2:class}"${3}>
		${4}${0}
	<$1>

snippet mcond
	<${1:if}(${2:condition})>
		${3:body}${0}
	</$1>

snippet melse
	<else>
		${1:body}${0}
	</else>

# Jest
snippet describe
	describe('${1:description}', () => {
		${2:testBody}${0}
	});

snippet it
	it('${1:decription}', () => {
		${2:testBody}${0}
	});

snippet be
	beforeEach(() => {
		${1:body}
	});

snippet expect
	expect(${1:expected}).to${2:function}(${3}${0});


# Graphql snippets
snippet grreq
	var { buildSchema, GraphQLSchema, printSchema, GraphQLObjectType,
	      GraphQLString, GraphQLID, GraphQLInt, GraphQLList } = require('graphql');

snippet grbs
	var ${1:schemaName} = buildSchema(\`
		${0}
	\`);

snippet grobj
	var ${1:Query} = new GraphQLObjectType({
		name: '${2:Name}',
		fields: {
			${0}
		}
	});

snippet grarg
	${1:arg}: {type: ${0:type}}

snippet grresolve
	resolve: (_, {${1:roots}}) => {
		${0}
	}

snippet grschema
	var ${1:schema} = new GraphQLSchema({
		query: ${2:graphQLObjType},
	});

snippet grtype
	GraphQL${1:String}

